/*
 *  Abuse - dark 2D side-scrolling platform game
 *  Copyright (c) 2014 Daniel Potter <dmpotter44@gmail.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 */

#ifndef __EVENT_HPP_
#define __EVENT_HPP_

#include "SDL.h"

class image;
class palette;
class Sprite;

// Abuse user events
/**
 * Internal Abuse event used mostly for UI events but also for network events
 */
extern Uint32 ABUSE_EV_MESSAGE;
/**
 * Internal Abuse event for when a UI window is being closed.
 */
extern Uint32 ABUSE_EV_CLOSE_WINDOW;
/**
 * Internal Abuse event flag used to mark an event as "processed"
 */
extern Uint32 ABUSE_EV_SPURIOUS;

class EventHandler
{
public:
	EventHandler(image *screen, palette *pal);
	~EventHandler();
	void PushUIEvent(int id, void* widget);
	ivec2 GetMousePos();
	void SetMousePos(ivec2 pos);
	void SetMouseShape(image *sprite, ivec2 hotspot);
	void SysWarpMouse(ivec2 pos);
	/**
	 * Apply mouse scaling so that a given x,y generated by SDL is corrected to
	 * be the correct location on the Abuse screen.
	 */
	void ScaleMouse(Sint32& x, Sint32& y);
	int IsPending();
	int PollEvent(SDL_Event &ev);
	/**
	 * Determine if the given event is an "active user" event - that is, an
	 * event caused by the user actively doing (something) as opposed to an
	 * event that can be caused without the user intention. "Active" invents
	 * include pressing a key or mouse button, or a button on a controller.
	 * "Active" events do NOT include moving the mouse or moving a control
	 * stick on a controller.
	 */
	bool IsActiveUserEvent(SDL_Event &ev);
	/**
	 * Redraws everything (should this really be part of the event handler?)
	 */
	void FlushScreen();
protected:
	image* m_screen;
	Sprite* m_sprite;
	ivec2 m_pos;
	ivec2 m_center;
	// "Dead zone" before motion of a stick "counts". Maximum stick values are
	// 0x7FFF, currently I've arbitrarily set this to 1/4th maximum.
	int m_dead_zone = 0x2000;
	// Scale amount for the right stick when moving the mouse. The range is
	// -0x7FFF to 0x7FFF, or -32767 to 32767. The default means it will move
	// a maximum of 3 pixels per tick.
	int m_right_stick_scale = 0x2000;
	// Scale amount for the right stick when it's player-locked.
	// 0x400 gives a range of -31 to 31.
	int m_right_stick_player_scale = 0x400;
	int m_right_stick_x, m_right_stick_y;
};

#endif // __EVENT_HPP_
